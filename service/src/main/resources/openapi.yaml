openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:9000/mod-workflow
  description: Generated server url
tags:
- name: Actuator
  description: Monitor and interact
  externalDocs:
    description: Spring Boot Actuator Web API Documentation
    url: https://docs.spring.io/spring-boot/docs/current/actuator-api/html/
paths:
  /nodes:
    get:
      tags:
      - node-entity-controller
      description: get-node
      operationId: getCollectionResource-node-get_1
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 20
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelNode'
            application/x-spring-data-compact+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelNode'
            text/uri-list:
              schema:
                type: string
    post:
      tags:
      - node-entity-controller
      description: create-node
      operationId: postCollectionResource-node-post
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/CompressFileTaskRequestBody'
              - $ref: '#/components/schemas/ConditionRequestBody'
              - $ref: '#/components/schemas/ConnectToRequestBody'
              - $ref: '#/components/schemas/DatabaseConnectionTaskRequestBody'
              - $ref: '#/components/schemas/DatabaseDisconnectTaskRequestBody'
              - $ref: '#/components/schemas/DatabaseQueryTaskRequestBody'
              - $ref: '#/components/schemas/DirectoryTaskRequestBody'
              - $ref: '#/components/schemas/EmailTaskRequestBody'
              - $ref: '#/components/schemas/EndEventRequestBody'
              - $ref: '#/components/schemas/EventSubprocessRequestBody'
              - $ref: '#/components/schemas/ExclusiveGatewayRequestBody'
              - $ref: '#/components/schemas/FileTaskRequestBody'
              - $ref: '#/components/schemas/FtpTaskRequestBody'
              - $ref: '#/components/schemas/InclusiveGatewayRequestBody'
              - $ref: '#/components/schemas/MoveToLastGatewayRequestBody'
              - $ref: '#/components/schemas/MoveToNodeRequestBody'
              - $ref: '#/components/schemas/ParallelGatewayRequestBody'
              - $ref: '#/components/schemas/ProcessorTaskRequestBody'
              - $ref: '#/components/schemas/ReceiveTaskRequestBody'
              - $ref: '#/components/schemas/RequestTaskRequestBody'
              - $ref: '#/components/schemas/ScriptTaskRequestBody'
              - $ref: '#/components/schemas/StartEventRequestBody'
              - $ref: '#/components/schemas/SubprocessRequestBody'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelNode'
  /nodes/{id}:
    get:
      tags:
      - node-entity-controller
      description: get-node
      operationId: getItemResource-node-get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelNode'
        "404":
          description: Not Found
    put:
      tags:
      - node-entity-controller
      description: update-node
      operationId: putItemResource-node-put
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/CompressFileTaskRequestBody'
              - $ref: '#/components/schemas/ConditionRequestBody'
              - $ref: '#/components/schemas/ConnectToRequestBody'
              - $ref: '#/components/schemas/DatabaseConnectionTaskRequestBody'
              - $ref: '#/components/schemas/DatabaseDisconnectTaskRequestBody'
              - $ref: '#/components/schemas/DatabaseQueryTaskRequestBody'
              - $ref: '#/components/schemas/DirectoryTaskRequestBody'
              - $ref: '#/components/schemas/EmailTaskRequestBody'
              - $ref: '#/components/schemas/EndEventRequestBody'
              - $ref: '#/components/schemas/EventSubprocessRequestBody'
              - $ref: '#/components/schemas/ExclusiveGatewayRequestBody'
              - $ref: '#/components/schemas/FileTaskRequestBody'
              - $ref: '#/components/schemas/FtpTaskRequestBody'
              - $ref: '#/components/schemas/InclusiveGatewayRequestBody'
              - $ref: '#/components/schemas/MoveToLastGatewayRequestBody'
              - $ref: '#/components/schemas/MoveToNodeRequestBody'
              - $ref: '#/components/schemas/ParallelGatewayRequestBody'
              - $ref: '#/components/schemas/ProcessorTaskRequestBody'
              - $ref: '#/components/schemas/ReceiveTaskRequestBody'
              - $ref: '#/components/schemas/RequestTaskRequestBody'
              - $ref: '#/components/schemas/ScriptTaskRequestBody'
              - $ref: '#/components/schemas/StartEventRequestBody'
              - $ref: '#/components/schemas/SubprocessRequestBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelNode'
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelNode'
        "204":
          description: No Content
    delete:
      tags:
      - node-entity-controller
      description: delete-node
      operationId: deleteItemResource-node-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - node-entity-controller
      description: patch-node
      operationId: patchItemResource-node-patch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/CompressFileTaskRequestBody'
              - $ref: '#/components/schemas/ConditionRequestBody'
              - $ref: '#/components/schemas/ConnectToRequestBody'
              - $ref: '#/components/schemas/DatabaseConnectionTaskRequestBody'
              - $ref: '#/components/schemas/DatabaseDisconnectTaskRequestBody'
              - $ref: '#/components/schemas/DatabaseQueryTaskRequestBody'
              - $ref: '#/components/schemas/DirectoryTaskRequestBody'
              - $ref: '#/components/schemas/EmailTaskRequestBody'
              - $ref: '#/components/schemas/EndEventRequestBody'
              - $ref: '#/components/schemas/EventSubprocessRequestBody'
              - $ref: '#/components/schemas/ExclusiveGatewayRequestBody'
              - $ref: '#/components/schemas/FileTaskRequestBody'
              - $ref: '#/components/schemas/FtpTaskRequestBody'
              - $ref: '#/components/schemas/InclusiveGatewayRequestBody'
              - $ref: '#/components/schemas/MoveToLastGatewayRequestBody'
              - $ref: '#/components/schemas/MoveToNodeRequestBody'
              - $ref: '#/components/schemas/ParallelGatewayRequestBody'
              - $ref: '#/components/schemas/ProcessorTaskRequestBody'
              - $ref: '#/components/schemas/ReceiveTaskRequestBody'
              - $ref: '#/components/schemas/RequestTaskRequestBody'
              - $ref: '#/components/schemas/ScriptTaskRequestBody'
              - $ref: '#/components/schemas/StartEventRequestBody'
              - $ref: '#/components/schemas/SubprocessRequestBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelNode'
        "204":
          description: No Content
  /profile:
    get:
      tags:
      - profile-controller
      operationId: listAllFormsOfMetadata_1
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/RepresentationModelObject'
  /profile/nodes:
    get:
      tags:
      - profile-controller
      operationId: descriptor_1_1_1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
            application/alps+json:
              schema:
                type: string
            application/schema+json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
  /profile/triggers:
    get:
      tags:
      - profile-controller
      operationId: descriptor_1_1_2
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
            application/alps+json:
              schema:
                type: string
            application/schema+json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
  /profile/workflows:
    get:
      tags:
      - profile-controller
      operationId: descriptor_1_1_3
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
            application/alps+json:
              schema:
                type: string
            application/schema+json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
  /triggers:
    get:
      tags:
      - trigger-entity-controller
      description: get-trigger
      operationId: getCollectionResource-trigger-get_1
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 20
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelTrigger'
            application/x-spring-data-compact+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelTrigger'
            text/uri-list:
              schema:
                type: string
    post:
      tags:
      - trigger-entity-controller
      description: create-trigger
      operationId: postCollectionResource-trigger-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerRequestBody'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelTrigger'
  /triggers/{id}:
    get:
      tags:
      - trigger-entity-controller
      description: get-trigger
      operationId: getItemResource-trigger-get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelTrigger'
        "404":
          description: Not Found
    put:
      tags:
      - trigger-entity-controller
      description: update-trigger
      operationId: putItemResource-trigger-put
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerRequestBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelTrigger'
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelTrigger'
        "204":
          description: No Content
    delete:
      tags:
      - trigger-entity-controller
      description: delete-trigger
      operationId: deleteItemResource-trigger-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - trigger-entity-controller
      description: patch-trigger
      operationId: patchItemResource-trigger-patch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerRequestBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelTrigger'
        "204":
          description: No Content
  /workflows:
    get:
      tags:
      - workflow-entity-controller
      description: get-workflow
      operationId: getCollectionResource-workflow-get_1
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 20
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelWorkflow'
            application/x-spring-data-compact+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelWorkflow'
            text/uri-list:
              schema:
                type: string
    post:
      tags:
      - workflow-entity-controller
      description: create-workflow
      operationId: postCollectionResource-workflow-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowRequestBody'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelWorkflow'
  /workflows/{id}:
    get:
      tags:
      - workflow-entity-controller
      description: get-workflow
      operationId: getItemResource-workflow-get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelWorkflow'
        "404":
          description: Not Found
    put:
      tags:
      - workflow-entity-controller
      description: update-workflow
      operationId: putItemResource-workflow-put
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowRequestBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelWorkflow'
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelWorkflow'
        "204":
          description: No Content
    delete:
      tags:
      - workflow-entity-controller
      description: delete-workflow
      operationId: deleteItemResource-workflow-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - workflow-entity-controller
      description: patch-workflow
      operationId: patchItemResource-workflow-patch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowRequestBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelWorkflow'
        "204":
          description: No Content
  /workflows/{id}/nodes:
    get:
      tags:
      - workflow-property-reference-controller
      description: get-node-by-workflow-Id
      operationId: followPropertyReference-workflow-get_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelNode'
            text/uri-list:
              schema:
                type: string
        "404":
          description: Not Found
    put:
      tags:
      - workflow-property-reference-controller
      description: update-node-by-workflow-Id
      operationId: createPropertyReference-workflow-put
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          application/x-spring-data-compact+json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          text/uri-list:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelNode'
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelNode'
        "204":
          description: No Content
    delete:
      tags:
      - workflow-property-reference-controller
      description: delete-node-by-workflow-Id
      operationId: deletePropertyReference-workflow-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - workflow-property-reference-controller
      description: patch-node-by-workflow-Id
      operationId: createPropertyReference-workflow-patch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          application/x-spring-data-compact+json:
            schema:
              $ref: '#/components/schemas/CollectionModelObject'
          text/uri-list:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelNode'
        "204":
          description: No Content
  /workflows/{id}/nodes/{propertyId}:
    get:
      tags:
      - workflow-property-reference-controller
      description: get-node-by-workflow-Id
      operationId: followPropertyReference-workflow-get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: propertyId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelNode'
        "404":
          description: Not Found
    delete:
      tags:
      - workflow-property-reference-controller
      description: delete-node-by-workflow-Id
      operationId: deletePropertyReferenceId-workflow-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: propertyId
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
  /workflows/{id}/deactivate:
    put:
      tags:
      - workflow-controller
      operationId: deactivateWorkflow
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tenant:
                  type: string
                token:
                  type: string
      responses:
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "204":
          description: No Content
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Workflow'
  /workflows/{id}/activate:
    put:
      tags:
      - workflow-controller
      operationId: activateWorkflow
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tenant:
                  type: string
                token:
                  type: string
      responses:
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "204":
          description: No Content
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Workflow'
  /workflows/{id}/start:
    post:
      tags:
      - workflow-controller
      operationId: startWorkflow
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tenant:
                  type: string
                token:
                  type: string
                context:
                  $ref: '#/components/schemas/JsonNode'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "204":
          description: No Content
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/JsonNode'
  /events/**:
    post:
      tags:
      - event-controller
      operationId: postHandleEventsWithFile_1
      parameters:
      - name: path
        in: query
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file
              type: object
              properties:
                file:
                  type: string
                  format: binary
                tenant:
                  type: string
          application/json:
            schema:
              $ref: '#/components/schemas/JsonNode'
      responses:
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "204":
          description: No Content
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/JsonNode'
  /_/tenant:
    post:
      tags:
      - tenant-controller
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tenant:
                  type: string
                attributes:
                  $ref: '#/components/schemas/TenantAttributes'
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "204":
          description: No Content
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: string
    delete:
      tags:
      - tenant-controller
      operationId: delete
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "204":
          description: No Content
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "200":
          description: OK
  /workflows/{id}/history:
    get:
      tags:
      - workflow-controller
      operationId: workflowHistory
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: query
        required: true
        schema:
          type: string
      - name: token
        in: query
        required: true
        schema:
          type: string
      responses:
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "204":
          description: No Content
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/JsonNode'
  /actuator:
    get:
      tags:
      - Actuator
      operationId: links
      responses:
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "204":
          description: No Content
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "200":
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/Link'
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/Link'
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/Link'
  /actuator/info:
    get:
      tags:
      - Actuator
      operationId: handle
      responses:
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "204":
          description: No Content
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "200":
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /actuator/health:
    get:
      tags:
      - Actuator
      operationId: handle_1
      responses:
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "204":
          description: No Content
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "200":
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /actuator/health/**:
    get:
      tags:
      - Actuator
      operationId: handle_2
      responses:
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "204":
          description: No Content
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "200":
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /actuator/flyway:
    get:
      tags:
      - Actuator
      operationId: handle_3
      responses:
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "204":
          description: No Content
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "200":
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /actions:
    get:
      tags:
      - action-controller
      operationId: getActions
      parameters:
      - name: tenant
        in: query
        required: true
        schema:
          type: string
      responses:
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "204":
          description: No Content
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Action'
  /_/ramls:
    get:
      tags:
      - ramls-controller
      operationId: getRamls
      parameters:
      - name: path
        in: query
        required: false
        schema:
          type: string
      - name: x-okapi-url
        in: header
        required: true
        schema:
          type: string
      responses:
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "204":
          description: No Content
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
  /_/jsonSchemas:
    get:
      tags:
      - json-schemas-controller
      operationId: getSchemas
      parameters:
      - name: path
        in: query
        required: false
        schema:
          type: string
      - name: x-okapi-url
        in: header
        required: true
        schema:
          type: string
      responses:
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "204":
          description: No Content
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResponseErrors'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
components:
  schemas:
    Error:
      required:
      - message
      type: object
      properties:
        message:
          type: string
        type:
          type: string
        code:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
    Parameter:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    ResponseErrors:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        total_records:
          type: integer
          format: int32
    AbstractJsonSchemaPropertyObject:
      type: object
      properties:
        title:
          type: string
        readOnly:
          type: boolean
    Item:
      type: object
      properties:
        type:
          type: string
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AbstractJsonSchemaPropertyObject'
        requiredProperties:
          type: array
          items:
            type: string
    JsonSchema:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AbstractJsonSchemaPropertyObject'
        requiredProperties:
          type: array
          items:
            type: string
        definitions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Item'
        type:
          type: string
        $schema:
          type: string
    Links:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Link'
    RepresentationModelObject:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
    EntityModelTrigger:
      required:
      - method
      - name
      - pathPattern
      type: object
      properties:
        name:
          maxLength: 64
          minLength: 4
          type: string
        description:
          maxLength: 256
          minLength: 0
          type: string
        pathPattern:
          maxLength: 256
          minLength: 2
          type: string
        method:
          type: string
          enum:
          - GET
          - HEAD
          - POST
          - PUT
          - PATCH
          - DELETE
          - OPTIONS
          - TRACE
        _links:
          $ref: '#/components/schemas/Links'
    PageMetadata:
      type: object
      properties:
        size:
          type: integer
          format: int64
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
        number:
          type: integer
          format: int64
    PagedModelEntityModelTrigger:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            triggers:
              type: array
              items:
                $ref: '#/components/schemas/EntityModelTrigger'
        _links:
          $ref: '#/components/schemas/Links'
        page:
          $ref: '#/components/schemas/PageMetadata'
    EmbeddedLoopReference:
      required:
      - parallel
      type: object
      properties:
        cardinalityExpression:
          type: string
        dataInputRefExpression:
          type: string
        inputDataName:
          type: string
        completeConditionExpression:
          type: string
        parallel:
          type: boolean
    EmbeddedProcessor:
      required:
      - code
      - functionName
      - scriptType
      type: object
      properties:
        scriptType:
          type: string
          enum:
          - GROOVY
          - JAVA
          - JS
          - PYTHON
          - RUBY
        functionName:
          maxLength: 128
          minLength: 4
          type: string
        code:
          type: string
        buffer:
          type: integer
          format: int32
        delay:
          type: integer
          format: int32
    EmbeddedRequest:
      required:
      - accept
      - contentType
      - method
      - url
      type: object
      properties:
        url:
          type: string
        method:
          type: string
          enum:
          - GET
          - HEAD
          - POST
          - PUT
          - PATCH
          - DELETE
          - OPTIONS
          - TRACE
        contentType:
          type: string
        accept:
          type: string
        bodyTemplate:
          type: string
        iterable:
          type: boolean
        iterableKey:
          type: string
        responseKey:
          type: string
    EmbeddedVariable:
      required:
      - key
      type: object
      properties:
        key:
          maxLength: 64
          minLength: 4
          type: string
        type:
          type: string
          enum:
          - PROCESS
          - LOCAL
        spin:
          type: boolean
        asJson:
          type: boolean
        asTransient:
          type: boolean
    EntityModelNode:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 64
          minLength: 3
          type: string
        description:
          maxLength: 512
          minLength: 0
          type: string
        deserializeAs:
          type: string
          readOnly: true
        identifier:
          type: string
        _links:
          $ref: '#/components/schemas/Links'
    Node:
      required:
      - name
      type: object
      properties:
        id:
          type: string
        name:
          maxLength: 64
          minLength: 3
          type: string
        description:
          maxLength: 512
          minLength: 0
          type: string
        deserializeAs:
          type: string
          readOnly: true
        identifier:
          type: string
      discriminator:
        propertyName: deserializeAs
    PagedModelEntityModelNode:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            nodes:
              type: array
              items:
                $ref: '#/components/schemas/EntityModelNode'
        _links:
          $ref: '#/components/schemas/Links'
        page:
          $ref: '#/components/schemas/PageMetadata'
    EntityModelWorkflow:
      required:
      - name
      - versionTag
      type: object
      properties:
        name:
          maxLength: 64
          minLength: 4
          type: string
        versionTag:
          maxLength: 64
          minLength: 1
          type: string
        historyTimeToLive:
          minimum: 0
          type: integer
          format: int32
        description:
          maxLength: 512
          minLength: 0
          type: string
        active:
          type: boolean
        deploymentId:
          type: string
        setup:
          $ref: '#/components/schemas/Setup'
        initialContext:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/JsonNode'
        _links:
          $ref: '#/components/schemas/Links'
    JsonNode:
      type: object
    PagedModelEntityModelWorkflow:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            workflows:
              type: array
              items:
                $ref: '#/components/schemas/EntityModelWorkflow'
        _links:
          $ref: '#/components/schemas/Links'
        page:
          $ref: '#/components/schemas/PageMetadata'
    Setup:
      type: object
      properties:
        asyncBefore:
          type: boolean
        asyncAfter:
          type: boolean
    Workflow:
      required:
      - name
      - versionTag
      type: object
      properties:
        id:
          type: string
        name:
          maxLength: 64
          minLength: 4
          type: string
        versionTag:
          maxLength: 64
          minLength: 1
          type: string
        historyTimeToLive:
          minimum: 0
          type: integer
          format: int32
        description:
          maxLength: 512
          minLength: 0
          type: string
        active:
          type: boolean
        deploymentId:
          type: string
        setup:
          $ref: '#/components/schemas/Setup'
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/Node'
        initialContext:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/JsonNode'
    CollectionModelNode:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            nodes:
              type: array
              items:
                oneOf:
                - $ref: '#/components/schemas/CompressFileTaskResponse'
                - $ref: '#/components/schemas/ConditionResponse'
                - $ref: '#/components/schemas/ConnectToResponse'
                - $ref: '#/components/schemas/DatabaseConnectionTaskResponse'
                - $ref: '#/components/schemas/DatabaseDisconnectTaskResponse'
                - $ref: '#/components/schemas/DatabaseQueryTaskResponse'
                - $ref: '#/components/schemas/DirectoryTaskResponse'
                - $ref: '#/components/schemas/EmailTaskResponse'
                - $ref: '#/components/schemas/EndEventResponse'
                - $ref: '#/components/schemas/EventSubprocessResponse'
                - $ref: '#/components/schemas/ExclusiveGatewayResponse'
                - $ref: '#/components/schemas/FileTaskResponse'
                - $ref: '#/components/schemas/FtpTaskResponse'
                - $ref: '#/components/schemas/InclusiveGatewayResponse'
                - $ref: '#/components/schemas/MoveToLastGatewayResponse'
                - $ref: '#/components/schemas/MoveToNodeResponse'
                - $ref: '#/components/schemas/ParallelGatewayResponse'
                - $ref: '#/components/schemas/ProcessorTaskResponse'
                - $ref: '#/components/schemas/ReceiveTaskResponse'
                - $ref: '#/components/schemas/RequestTaskResponse'
                - $ref: '#/components/schemas/ScriptTaskResponse'
                - $ref: '#/components/schemas/StartEventResponse'
                - $ref: '#/components/schemas/SubprocessResponse'
        _links:
          $ref: '#/components/schemas/Links'
    CollectionModelObject:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            objects:
              type: array
              items:
                type: object
        _links:
          $ref: '#/components/schemas/Links'
    TriggerRequestBody:
      required:
      - method
      - name
      - pathPattern
      type: object
      properties:
        id:
          type: string
        name:
          maxLength: 64
          minLength: 4
          type: string
        description:
          maxLength: 256
          minLength: 0
          type: string
        pathPattern:
          maxLength: 256
          minLength: 2
          type: string
        method:
          type: string
          enum:
          - GET
          - HEAD
          - POST
          - PUT
          - PATCH
          - DELETE
          - OPTIONS
          - TRACE
    CompressFileTaskRequestBody:
      required:
      - name
      type: object
      allOf:
      - $ref: '#/components/schemas/NodeRequestBody'
      - type: object
        properties:
          inputVariables:
            uniqueItems: true
            type: array
            items:
              $ref: '#/components/schemas/EmbeddedVariable'
          outputVariable:
            $ref: '#/components/schemas/EmbeddedVariable'
          asyncBefore:
            type: boolean
          asyncAfter:
            type: boolean
          source:
            type: string
          destination:
            type: string
          format:
            type: string
            enum:
            - BZIP2
            - GZIP
            - ZIP
          container:
            type: string
            enum:
            - NONE
            - TAR
    ConditionRequestBody:
      required:
      - answer
      - expression
      - name
      type: object
      allOf:
      - $ref: '#/components/schemas/NodeRequestBody'
      - type: object
        properties:
          expression:
            maxLength: 128
            minLength: 4
            type: string
          answer:
            maxLength: 64
            minLength: 2
            type: string
    ConnectToRequestBody:
      required:
      - name
      - nodeId
      type: object
      allOf:
      - $ref: '#/components/schemas/NodeRequestBody'
      - type: object
        properties:
          nodeId:
            type: string
    DatabaseConnectionTaskRequestBody:
      required:
      - name
      type: object
      allOf:
      - $ref: '#/components/schemas/NodeRequestBody'
      - type: object
        properties:
          inputVariables:
            uniqueItems: true
            type: array
            items:
              $ref: '#/components/schemas/EmbeddedVariable'
          outputVariable:
            $ref: '#/components/schemas/EmbeddedVariable'
          asyncBefore:
            type: boolean
          asyncAfter:
            type: boolean
          designation:
            type: string
          url:
            type: string
          username:
            type: string
          password:
            type: string
    DatabaseDisconnectTaskRequestBody:
      required:
      - name
      type: object
      allOf:
      - $ref: '#/components/schemas/NodeRequestBody'
      - type: object
        properties:
          inputVariables:
            uniqueItems: true
            type: array
            items:
              $ref: '#/components/schemas/EmbeddedVariable'
          outputVariable:
            $ref: '#/components/schemas/EmbeddedVariable'
          asyncBefore:
            type: boolean
          asyncAfter:
            type: boolean
          designation:
            type: string
    DatabaseQueryTaskRequestBody:
      required:
      - name
      type: object
      allOf:
      - $ref: '#/components/schemas/NodeRequestBody'
      - type: object
        properties:
          inputVariables:
            uniqueItems: true
            type: array
            items:
              $ref: '#/components/schemas/EmbeddedVariable'
          outputVariable:
            $ref: '#/components/schemas/EmbeddedVariable'
          asyncBefore:
            type: boolean
          asyncAfter:
            type: boolean
          designation:
            type: string
          query:
            type: string
          outputPath:
            type: string
          resultType:
            type: string
            enum:
            - CSV
            - TSV
            - JSON
          includeHeader:
            type: boolean
    DirectoryTaskRequestBody:
      required:
      - action
      - name
      - path
      - workflow
      type: object
      allOf:
      - $ref: '#/components/schemas/NodeRequestBody'
      - type: object
        properties:
          path:
            type: string
          workflow:
            type: string
          action:
            type: string
            enum:
            - READ_NEXT
            - DELETE_NEXT
            - LIST
            - WRITE
          inputVariables:
            uniqueItems: true
            type: array
            items:
              $ref: '#/components/schemas/EmbeddedVariable'
          outputVariable:
            $ref: '#/components/schemas/EmbeddedVariable'
          asyncBefore:
            type: boolean
          asyncAfter:
            type: boolean
    EmailTaskRequestBody:
      required:
      - mailFrom
      - mailSubject
      - mailText
      - mailTo
      - name
      type: object
      allOf:
      - $ref: '#/components/schemas/NodeRequestBody'
      - type: object
        properties:
          inputVariables:
            uniqueItems: true
            type: array
            items:
              $ref: '#/components/schemas/EmbeddedVariable'
          outputVariable:
            $ref: '#/components/schemas/EmbeddedVariable'
          asyncBefore:
            type: boolean
          asyncAfter:
            type: boolean
          mailTo:
            maxLength: 256
            minLength: 3
            type: string
          mailCc:
            type: string
          mailBcc:
            type: string
          mailFrom:
            maxLength: 256
            minLength: 3
            type: string
          mailSubject:
            maxLength: 256
            minLength: 2
            type: string
          mailText:
            maxLength: 2147483647
            minLength: 2
            type: string
          mailMarkup:
            type: string
          attachmentPath:
            type: string
          includeAttachment:
            type: string
    EndEventRequestBody:
      required:
      - name
      type: object
      allOf:
      - $ref: '#/components/schemas/NodeRequestBody'
    EventSubprocessRequestBody:
      required:
      - name
      type: object
      allOf:
      - $ref: '#/components/schemas/NodeRequestBody'
    ExclusiveGatewayRequestBody:
      required:
      - name
      type: object
      allOf:
      - $ref: '#/components/schemas/NodeRequestBody'
      - type: object
        properties:
          direction:
            type: string
            enum:
            - UNSPECIFIED
            - CONVERGING
            - DIVERGING
            - MIXED
    FileTaskRequestBody:
      required:
      - name
      type: object
      allOf:
      - $ref: '#/components/schemas/NodeRequestBody'
      - type: object
        properties:
          inputVariables:
            uniqueItems: true
            type: array
            items:
              $ref: '#/components/schemas/EmbeddedVariable'
          outputVariable:
            $ref: '#/components/schemas/EmbeddedVariable'
          asyncBefore:
            type: boolean
          asyncAfter:
            type: boolean
          op:
            type: string
            enum:
            - LIST
            - READ
            - WRITE
            - COPY
            - MOVE
            - DELETE
            - LINE_COUNT
            - READ_LINE
            - PUSH
            - POP
          path:
            type: string
          target:
            type: string
          line:
            type: string
    FtpTaskRequestBody:
      required:
      - name
      type: object
      allOf:
      - $ref: '#/components/schemas/NodeRequestBody'
      - type: object
        properties:
          inputVariables:
            uniqueItems: true
            type: array
            items:
              $ref: '#/components/schemas/EmbeddedVariable'
          outputVariable:
            $ref: '#/components/schemas/EmbeddedVariable'
          asyncBefore:
            type: boolean
          asyncAfter:
            type: boolean
          originPath:
            type: string
          destinationPath:
            type: string
          op:
            type: string
            enum:
            - GET
            - PUT
          scheme:
            type: string
          host:
            type: string
          port:
            type: integer
            format: int32
          username:
            type: string
          password:
            type: string
    InclusiveGatewayRequestBody:
      required:
      - name
      type: object
      allOf:
      - $ref: '#/components/schemas/NodeRequestBody'
      - type: object
        properties:
          direction:
            type: string
            enum:
            - UNSPECIFIED
            - CONVERGING
            - DIVERGING
            - MIXED
    MoveToLastGatewayRequestBody:
      required:
      - name
      type: object
      allOf:
      - $ref: '#/components/schemas/NodeRequestBody'
      - type: object
        properties:
          direction:
            type: string
            enum:
            - UNSPECIFIED
            - CONVERGING
            - DIVERGING
            - MIXED
    MoveToNodeRequestBody:
      required:
      - gatewayId
      - name
      type: object
      allOf:
      - $ref: '#/components/schemas/NodeRequestBody'
      - type: object
        properties:
          gatewayId:
            type: string
    NodeRequestBody:
      required:
      - name
      type: object
      properties:
        id:
          type: string
        name:
          maxLength: 64
          minLength: 3
          type: string
        description:
          maxLength: 512
          minLength: 0
          type: string
        deserializeAs:
          type: string
          readOnly: true
        identifier:
          type: string
      discriminator:
        propertyName: deserializeAs
    ParallelGatewayRequestBody:
      required:
      - name
      type: object
      allOf:
      - $ref: '#/components/schemas/NodeRequestBody'
      - type: object
        properties:
          direction:
            type: string
            enum:
            - UNSPECIFIED
            - CONVERGING
            - DIVERGING
            - MIXED
    ProcessorTaskRequestBody:
      required:
      - name
      type: object
      allOf:
      - $ref: '#/components/schemas/NodeRequestBody'
      - type: object
        properties:
          processor:
            $ref: '#/components/schemas/EmbeddedProcessor'
          inputVariables:
            uniqueItems: true
            type: array
            items:
              $ref: '#/components/schemas/EmbeddedVariable'
          outputVariable:
            $ref: '#/components/schemas/EmbeddedVariable'
          asyncBefore:
            type: boolean
          asyncAfter:
            type: boolean
    ReceiveTaskRequestBody:
      required:
      - message
      - name
      type: object
      allOf:
      - $ref: '#/components/schemas/NodeRequestBody'
      - type: object
        properties:
          message:
            maxLength: 256
            minLength: 4
            type: string
          asyncBefore:
            type: boolean
          asyncAfter:
            type: boolean
    RequestTaskRequestBody:
      required:
      - name
      type: object
      allOf:
      - $ref: '#/components/schemas/NodeRequestBody'
      - type: object
        properties:
          request:
            $ref: '#/components/schemas/EmbeddedRequest'
          inputVariables:
            uniqueItems: true
            type: array
            items:
              $ref: '#/components/schemas/EmbeddedVariable'
          headerOutputVariables:
            uniqueItems: true
            type: array
            items:
              $ref: '#/components/schemas/EmbeddedVariable'
          outputVariable:
            $ref: '#/components/schemas/EmbeddedVariable'
          asyncBefore:
            type: boolean
          asyncAfter:
            type: boolean
    ScriptTaskRequestBody:
      required:
      - code
      - name
      type: object
      allOf:
      - $ref: '#/components/schemas/NodeRequestBody'
      - type: object
        properties:
          scriptFormat:
            type: string
          code:
            type: string
          resultVariable:
            type: string
          asyncBefore:
            type: boolean
          asyncAfter:
            type: boolean
    StartEventRequestBody:
      required:
      - name
      - type
      type: object
      allOf:
      - $ref: '#/components/schemas/NodeRequestBody'
      - type: object
        properties:
          type:
            type: string
            enum:
            - MESSAGE_CORRELATION
            - SCHEDULED
            - SIGNAL
            - NONE
          expression:
            maxLength: 256
            minLength: 4
            type: string
          interrupting:
            type: boolean
          asyncBefore:
            type: boolean
    SubprocessRequestBody:
      required:
      - name
      - type
      type: object
      allOf:
      - $ref: '#/components/schemas/NodeRequestBody'
      - type: object
        properties:
          type:
            type: string
            enum:
            - EMBEDDED
            - TRANSACTION
          asyncBefore:
            type: boolean
          asyncAfter:
            type: boolean
          loopRef:
            $ref: '#/components/schemas/EmbeddedLoopReference'
          multiInstance:
            type: boolean
    WorkflowRequestBody:
      required:
      - name
      - versionTag
      type: object
      properties:
        id:
          type: string
        name:
          maxLength: 64
          minLength: 4
          type: string
        versionTag:
          maxLength: 64
          minLength: 1
          type: string
        historyTimeToLive:
          minimum: 0
          type: integer
          format: int32
        description:
          maxLength: 512
          minLength: 0
          type: string
        active:
          type: boolean
        deploymentId:
          type: string
        setup:
          $ref: '#/components/schemas/Setup'
        nodes:
          type: array
          items:
            type: string
        initialContext:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/JsonNode'
    TenantAttributes:
      type: object
      properties:
        moduleTo:
          type: string
        moduleFrom:
          type: string
    Link:
      type: object
      properties:
        href:
          type: string
        hreflang:
          type: string
        title:
          type: string
        type:
          type: string
        deprecation:
          type: string
        profile:
          type: string
        name:
          type: string
        templated:
          type: boolean
    Action:
      required:
      - interfaceName
      - method
      - pathPattern
      type: object
      properties:
        interfaceName:
          type: string
        pathPattern:
          type: string
        method:
          type: string
          enum:
          - GET
          - HEAD
          - POST
          - PUT
          - PATCH
          - DELETE
          - OPTIONS
          - TRACE
